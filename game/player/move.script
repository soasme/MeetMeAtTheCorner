local data = require("main.data")

local ACCEL = 0.5
local SPEED_MAX = 1.2

go.property("direction", vmath.vector3(0, 1, 0))

local function look_at(self, pos)
	msg.post("view#view", "look_at", { position = pos})
end

local function snap(self, pos)
	msg.post("view#view", "snap_to", { position = pos})
	self.snap = false
end

local function validtile(self, pos)
	local t = tilemap.get_tile("/level#tilemap", "rocks", pos.x, pos.y)
	if t ~= 0 then return false end
	local t = tilemap.get_tile("/level#tilemap", "top", pos.x, pos.y)
	if t ~= 0 then return false end
	return true
end

local function set_sprite(self, direction)
	msg.post("#sprite", "play_animation", {
		id=hash("player_" .. direction)
	})
end

local function move(self, direction)
	if not self.walking then
		go.set("#move", "direction", data[direction])
		set_sprite(self, direction)
		local target = go.get_position() + data.TILE_SIZE*data[direction]
		if validtile(self, data.world2tile(target)) then
			self.walking = true
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, target, go.EASING_LINEAR, 0.2, 0, function()
				self.walking = false
			end)
		end
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("left") then
		move(self, "left")
	elseif action_id == hash("right") then
		move(self, "right")
	elseif action_id == hash("up") then
		move(self, "up")
	elseif action_id == hash("down") then
		move(self, "down")
	end
end

function init(self)
	self.walking = false
	msg.post(".", "acquire_input_focus")
end

function update(self)
	local pos = go.get_position()
	data.playerpos = pos
	if self.snap then snap(self, pos)
	else look_at(self, pos) end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	end
end
